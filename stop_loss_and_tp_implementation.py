# -*- coding: utf-8 -*-
"""stop_loss_and_tp_implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JbuH8D7SxS9Qoxtg3ysZmOoMaAZVdmyS
"""

# region imports
from AlgorithmImports import *
# endregion

class JumpingAsparagusJellyfish(QCAlgorithm):
    def initialize(self):
        self.set_start_date(2004, 1, 1)  # Inicio en 2004
        self.set_cash(100000)  # Capital inicial
        self.symbol = self.add_equity("NVAX", Resolution.HOUR, data_normalization_mode=DataNormalizationMode.Raw).symbol  # Agregar NVAX en 1 hora
        self.Securities[self.symbol].SetFeeModel(ConstantFeeModel(0))
        self.SL = None
        self.TP = None

    def on_data(self, data: Slice):
        if not data.bars.contains_key(self.symbol):
            return  # Salir si no hay datos

        weekday = self.time.weekday()  # Obtener el día de la semana (0 = Lunes, 6 = Domingo)

        # Comprar 10% del portafolio solo los lunes si no hay posiciones abiertas
        if weekday == 0 and not self.portfolio[self.symbol].invested:
            self.MarketOrder(self.symbol,5)
            self.SL = self.StopMarketOrder(self.symbol, -5, 57)
            self.TP = self.LimitOrder(self.symbol, -5, 150)

        # Liquidar la posición cualquier otro día de la semana
        if weekday != 0 and self.portfolio[self.symbol].invested:
            self.liquidate(self.symbol)

        def onOrderEvent(self, orderEvent):
            if (orderEvent.Status != OrderStatus.Filled):
                return

            if(self.SL == None or self.TP == None):
                return
            order = self.Transactions.GetOrderById(orderEvent.OrderId)

            if(self.SL.OrderId == order.Id):
                self.TP.Cancel()
                return
            if(self.TP.OrderId == order.Id):
                self.SL.Cancel()
                return