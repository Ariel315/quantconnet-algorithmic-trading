# -*- coding: utf-8 -*-
"""hurst_exponent_bollinger_bands.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OtacYV3wetrkLvzhW0n3gYW55Lxb2kXE
"""

from AlgorithmImports import *
import numpy as np
from scipy.stats import skew, kurtosis
class CreativeLightBrownDonkey(QCAlgorithm):
    def Initialize(self):
        self.window = 1000
        self.per = 6
        self.SetStartDate(2004, 1, 1)  # Fecha de inicio
        self.SetCash(100000)           # Capital inicial
        self.symbol = self.AddEquity("CHCO", Resolution.HOUR, data_normalization_mode=DataNormalizationMode.Raw).Symbol
        # Indicadores
        self.hurst_exponent = self.HE(self.symbol, self.window, self.per, Resolution.HOUR)
        self.bollinger = self.BB(self.symbol, self.per, 2, MovingAverageType.Simple, Resolution.HOUR)
        self.sma = self.SMA(self.symbol, self.per, Resolution.HOUR)
        self.Securities[self.symbol].SetFeeModel(ConstantFeeModel(0))
        self.prices = RollingWindow[float](self.window)  # Almacenar precios recientes
        self.edge = False
        self.entry_time = None  # Marca de tiempo de entrada
        self.total_days_invested = 0  # Acumulador de días invertidos
        # Esperar a que los indicadores estén listos
        self.SetWarmUp(self.window)
    def OnData(self, data):
        if self.IsWarmingUp or not data.Bars.ContainsKey(self.symbol):
            return
        price = data[self.symbol].Close
        self.prices.Add(price)
        if self.prices.IsReady:
            prices_array = np.array([self.prices[i] for i in range(self.window)])
            skewness = skew(prices_array)
            kurt = kurtosis(prices_array)
        if self.hurst_exponent.Current.Value < 0.40:
            self.edge = True
        if self.hurst_exponent.Current.Value > 0.40:
            self.edge = False
        # Verificar si ya estamos en una posición
        invested = self.Portfolio[self.symbol].Invested
        # Señal de compra: precio cierra por debajo de la banda inferior de Bollinger
        if self.edge and not invested and price < self.bollinger.LowerBand.Current.Value:
            self.entry_time = self.Time
            self.SetHoldings(self.symbol, 1)  # Comprar 100% del portafolio en CHCO
        # Señal de venta: precio cierra por encima de la SMA de 15 periodos
        elif invested and price > self.sma.Current.Value:
            self.Liquidate(self.symbol)  # Vender toda la posición en CHCO
            # Calcular días invertidos
            days_invested = (self.Time - self.entry_time).days
            self.total_days_invested += days_invested
            self.entry_time = None
    def OnEndOfAlgorithm(self):
        self.Debug(f"Tiempo total invertido en días: {self.total_days_invested:.2f}")